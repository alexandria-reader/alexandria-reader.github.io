<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database and API on Alexandria Case Study</title><link>https://alexandria-reader.github.io/database-api/</link><description>Recent content in Database and API on Alexandria Case Study</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://alexandria-reader.github.io/database-api/index.xml" rel="self" type="application/rss+xml"/><item><title>Database Architecture</title><link>https://alexandria-reader.github.io/database-api/database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/database-api/database/</guid><description>Normalization To normalize a database means to organize or structure it in a way that avoids redundancy of data, undesirable dependencies, and inconsistencies.
In his paper &amp;ldquo;Further Normalization of the Data Base Relational Model&amp;quot; [2], Edgar F. Codd, the &amp;ldquo;father&amp;rdquo; of the relational database model, listed these objectives of nomalization:
To free the collection of relations from undesirable insertion, update and deletion dependencies. To reduce the need for restructuring the collection of relations, as new types of data are introduced, and thus increase the life span of application programs.</description></item><item><title>API design</title><link>https://alexandria-reader.github.io/database-api/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/database-api/api/</guid><description>In the design of the API that is queried by the React front end, we aimed at following REST principles as outlined in Roy Fielding&amp;rsquo;s 2000 dissertation [3], but within the constraints of our type of application and of the current state of development.
Client-Server: As mentioned previously, this separation came naturally with the decision to create a React-based single page application. Stateless: For security reasons and device inerchangeability, only the user id is stored with the client in a JSON Web token which is sent with every request.</description></item></channel></rss>