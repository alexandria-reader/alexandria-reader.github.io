<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical Decisions on Alexandria Case Study</title><link>https://alexandria-reader.github.io/decisions/</link><description>Recent content in Technical Decisions on Alexandria Case Study</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://alexandria-reader.github.io/decisions/index.xml" rel="self" type="application/rss+xml"/><item><title>Choosing TypeScript</title><link>https://alexandria-reader.github.io/decisions/typescript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/decisions/typescript/</guid><description>Before we started developing Alexandria, none of us had any real experience using TypeScript, whereas we all had a solid foundation in JavaScript. Yet after doing a lot of research, we decided to use TypeScript in our project. Why?
Static typing One of the main reasons is the static typing that is a core part of TypeScript. In JavaScript, an object can have whatever properties you want, and you can add and remove them as you see fit.</description></item><item><title>SQL or NoSQL?</title><link>https://alexandria-reader.github.io/decisions/sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/decisions/sql/</guid><description>Alexandria is primarily deployed as a web application, where users log in and interact with the information they have stored on the platform. Therefore, robust and scalable database choice is a must.
Our research comparing between SQL and NoSQL databases centered around the following issues.
Parameter SQL NoSQL Ability to handle high volume of complex queries ✅ ❌ Scalability Vertical Horizontal Data type Structured Unstructured SQL Structured Query Language (SQL) is the standard language for dealing with relational databases that define relationships in the form of tables.</description></item><item><title>3 Layers for the Back End</title><link>https://alexandria-reader.github.io/decisions/backend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/decisions/backend/</guid><description>When we first start designing and implementing our backend, we started out with just two layers, routes and services. With this approach, we realized that we were ending up with bloated services as both the data access logic and the application logic resided in the service. Once we saw that this was becoming a problem, we did some research into the best way to structure the backend.
We ended up deciding on a three layer design, involving routes, a services layer and a data access layer.</description></item><item><title>React and Recoil</title><link>https://alexandria-reader.github.io/decisions/react-recoil/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/decisions/react-recoil/</guid><description>Project requirements In order to achieve both performance and user experience objectives for Alexandria, we settled on a number of goals that we&amp;rsquo;d like to fullfil at the initial stage.
One of the key features of the app is to reflect the changes made by a particular user interaction immediately, without an additional page reload.
Consider the following user actions and their effects on a piece of text. Our challenge is to make every user interaction feel instantaneous and seamless.</description></item></channel></rss>