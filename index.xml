<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alexandria Case Study</title><link>https://alexandria-reader.github.io/</link><description>Recent content on Alexandria Case Study</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://alexandria-reader.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Competitor Analysis</title><link>https://alexandria-reader.github.io/competitors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/competitors/</guid><description>Current &amp;ldquo;learning with text&amp;rdquo; software applications fall under two broad groups.
One group includes long-standing open source projects that are well received but sparsely maintained, or newer free applications that started with a bang, but were quickly forgotten and subsequently neglected.
The second group of applications are commercial solutions that address the goal of language learning with text, but suffer from feature bloat, lack of user friendliness, or mobile performance issues.</description></item><item><title>Technical Decisions</title><link>https://alexandria-reader.github.io/decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/decisions/</guid><description>Technical Decisions Every project starts with a couple of choices and ours is no different. From language, to database to front end we had to choose the technologies we felt were right for the scope and demands of our application.</description></item><item><title>Database and API</title><link>https://alexandria-reader.github.io/database-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/database-api/</guid><description>Database and API With the technical decisions settled, it was time to design two vital aspects of the backend architecture: the database and the API.
While a database of some form would always have been necessary, exposing an API was the result of going with a single page React app that talks to the server via API calls. This also opens the door for alternative front ends at a later stage - a mobile app could use the same back end.</description></item><item><title>Challenges and Solutions</title><link>https://alexandria-reader.github.io/challenges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/</guid><description>Challenges and Solutions While the designing database and API were challenging in and by themselves, and the thorough preparation definitely paid of during the coding stage, there were, of course, still hurdles to overcome, problems to solve, solutions to find.</description></item><item><title>MVP and Future Plans</title><link>https://alexandria-reader.github.io/future/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/future/</guid><description>MVP Confronted with the fully-fledged feature set of commercial language learning applications, our team made the early decision to create a minimum viable product that reflects the essence of what we find crucial in such a product.
User experience: mobile-first, fast and seamless processing of user interactions Backend and API: layered, robust, RESTful, maintainable, and flexible enough to service front-end needs Database: normalized and withstands scale CI/CD: establish continuous deployment pipelines Moving Forward Our core team has plans to continue support the maintenance and development of Alexandria.</description></item><item><title>References</title><link>https://alexandria-reader.github.io/references/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/references/</guid><description> Stephen Krishan (2021): Explorations in Language Acquisition and Use Yaroslav Lapin (2021) : Jotai vs. Recoil: What are the differences? Edgar F. Codd (1972): Further Normalization of the Data Base Relational Model Roy Fielding (2000): Architectural Styles and the Design of Network-based Software Architectures</description></item></channel></rss>