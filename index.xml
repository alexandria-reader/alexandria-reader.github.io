<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alexandria Case Study</title><link>https://alexandria-reader.github.io/</link><description>Recent content on Alexandria Case Study</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://alexandria-reader.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Competitor Analysis</title><link>https://alexandria-reader.github.io/competitors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/competitors/</guid><description>Current &amp;ldquo;learning with text&amp;rdquo; software applications fall under two broad groups.
One group includes long-standing open source projects that are well received but sparsely maintained, or newer free applications that started with a bang, but were quickly forgotten and subsequently neglected.
The second group of applications are commercial solutions that address the goal of language learning with text, but suffer from feature bloat, lack of user friendliness, or mobile performance issues.</description></item><item><title>Technical Decisions</title><link>https://alexandria-reader.github.io/decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/decisions/</guid><description>Technical Decisions Every project starts with a number of technical decisions, Alexandria is no different. From programming language, database selection, to front-end library, a number of concious choices were made to match the scope and demands of the application.</description></item><item><title>Database and API</title><link>https://alexandria-reader.github.io/database-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/database-api/</guid><description>Database and API Having settled on a tech stack, we turn our attention to two vital aspects of backend architecture: database and API design.
With a multitude of objects to keep track of, we dive into the process of identifying tables and columns, their relationships with each other, and normalizing the resulting SQL database.
One key aspect of Alexandria&amp;rsquo;s initial goal is to provide an application that is highly interactive. This particular need is well served by a single page application.</description></item><item><title>Challenges and Solutions</title><link>https://alexandria-reader.github.io/challenges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/</guid><description>Challenges and Solutions Treanslating our technical decisions and research into implementation was where the pedal met the metal. We were faced with a number of challenges: from automated testing, text parsing, to phrase selection in the UI.</description></item><item><title>MVP and Future Plans</title><link>https://alexandria-reader.github.io/future/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/future/</guid><description>MVP Confronted with the fully-fledged feature set of commercial language learning applications, our team made the early decision to create a minimum viable product that reflects the essence of what we find crucial in such a product.
User experience: mobile-first, fast and seamless processing of user interactions Backend and API: layered, robust, RESTful, maintainable, and flexible enough to service front-end needs Database: normalized and withstands scale CI/CD: establish continuous deployment pipelines Moving Forward Our core team has plans to continue support the maintenance and development of Alexandria.</description></item><item><title>References</title><link>https://alexandria-reader.github.io/references/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/references/</guid><description> Stephen Krishan (2021): Explorations in Language Acquisition and Use Software Development Community (2019): What Is Service-Oriented Architecture? Yaroslav Lapin (2021) : Jotai vs. Recoil: What are the differences? Edgar F. Codd (1972): Further Normalization of the Data Base Relational Model Roy Fielding (2000): Architectural Styles and the Design of Network-based Software Architectures</description></item></channel></rss>