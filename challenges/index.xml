<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Challenges and Solutions on Alexandria Case Study</title><link>https://alexandria-reader.github.io/challenges/</link><description>Recent content in Challenges and Solutions on Alexandria Case Study</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://alexandria-reader.github.io/challenges/index.xml" rel="self" type="application/rss+xml"/><item><title>Automating Tests</title><link>https://alexandria-reader.github.io/challenges/automated-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/automated-tests/</guid><description>One challenge we faced early on when implementing the back end and database was how to automate testing of pull requests.
In the beginning, while we had implemented some basic unit testing, when reviewing a PR we often had to manually test routes using Postman to ensure everything was working correctly before merging. Obviously this was not sustainable, especially as the project grew in size and scope.
We were able to achieve a good level of coverage using Jest quite quickly, but one problem we ran into was that each user was using their own local testing database, which sometimes lead to different outcomes.</description></item><item><title>Text Parsing</title><link>https://alexandria-reader.github.io/challenges/text-parsing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/text-parsing/</guid><description>Finding the words and phrases in the text We have already discussed why we chose to work with a relational database as opposed to a document-based one. But our decision to use PostgreSQL brought another benefit with it, and that is the build in full text search which we put to good use to solve.
On the front end, Alexandria highlights all the words and phrases that the user has already encountered.</description></item><item><title>Phrase selection UI</title><link>https://alexandria-reader.github.io/challenges/phrase-selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/phrase-selection/</guid><description>One of the most important features of our app is allowing users to select and save phrases along with its translation. This ended up being more challenging than expected due to the way our texts are displayed. Each word in a user text has its own state, and resides in its own span. When a user clicks on a word, it is added to the currentWord state, which then triggers a re-render of the translation input component, which contains the current word, existing translations, links to dictionaries and translations, as well as the option for the user to set their level of familiarity with the word.</description></item></channel></rss>