<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Challenges and Solutions on Alexandria Case Study</title><link>https://alexandria-reader.github.io/challenges/</link><description>Recent content in Challenges and Solutions on Alexandria Case Study</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://alexandria-reader.github.io/challenges/index.xml" rel="self" type="application/rss+xml"/><item><title>Automating Tests</title><link>https://alexandria-reader.github.io/challenges/automated-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/automated-tests/</guid><description>One challenge we faced early on when implementing the back end and database, was how the testing of pull requests could be automated.
Docker image to maintain test reliability After implementing the first few unit tests, we were confronted with the inefficiency of having to manually test routes using Postman when reviewing a PR. Given the project&amp;rsquo;s likely growth in both size and scope, this was not a sustainable solution.</description></item><item><title>Text Parsing</title><link>https://alexandria-reader.github.io/challenges/text-parsing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/text-parsing/</guid><description>Finding words and phrases in text Our decision to work with a relational versus a document-based database gave us the flexibility to perform complex queries. Our decision to use PostgreSQL specifically, brought another unexpected benefit: built-in full text search.
On the front end, Alexandria highlights all the words and phrases a user has already encountered. To find out whether a text contains words or phrases that the user has already marked, the words of the text have to be compared to all the user&amp;rsquo;s words and phrases saved in the database.</description></item><item><title>Phrase selection UI</title><link>https://alexandria-reader.github.io/challenges/phrase-selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alexandria-reader.github.io/challenges/phrase-selection/</guid><description>Alexandria&amp;rsquo;s ability to allow users select and save phrases along with its translation is one of the key features that sets her apart from other open-source or commercial products on the market. This particular functionality was challenging to implement due to the way texts are displayed.
Each word in a user text resides within its own span. When user clicks on a word, it is set as the currentWord state, triggering a re-render of the translation input component, which contains the current word, existing translations, links to dictionaries and translations, as well as the option for user to set their level of familiarity with the word.</description></item></channel></rss>